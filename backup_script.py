#!/usr/bin/env python3
"""
DumpItAll - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
–≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ VPS (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö)

üóÑÔ∏è Dump It All - Find It, Dump It, Save It!
"""

import os
import json
import time
import subprocess
import schedule
import psutil
import docker
import sqlite3
from datetime import datetime
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2.service_account import Credentials
import logging
import glob
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('backup.log'),
        logging.StreamHandler()
    ]
)

def print_logo():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ASCII –ª–æ–≥–æ—Ç–∏–ø–∞ DumpItAll"""
    logo = """
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
..............................................:-=**+-:..............................................
............................................=#%%%##%%%#+:...........................................
..........................................+%%%=:.....=%%%*..........................................
........................................-#%#=..........-#%#-........................................
.......................................=%%+..............+%%=.......................................
......................................+%%=................=%%+......................................
.....................................=%%=..................=%%+.....................................
....................................:%%+......:=++++=:......=%%-....................................
....................................#%*....:#%%%%%%%%%%*:....*%#....................................
...................................=%#-..-%%%%%%%%%%%%%%%%-..:#%+...................................
..................................:%%+.:#%%%%%%%%%%%%%%%%%%#:.+%%:..................................
..................................=%#-=%%%%%%%%%%%%%%%%%%%%%%=-#%+..................................
.................................:*%*-#%%%%%%%%%%%%%%%%%%%%%%#-*%*..................................
.................................:*%=+%%%%%%%%%%%%%%%%%%%%%%%%+=%#:.................................
.................................:*%+=%%%%%%%%%%%%%%%%%%%%%%%%=+%*..................................
..................................+%%=+%%%%%%%%%%%%%%%%%%%%%%+-#%=..................................
..............................:=#%%%%%=:#%%%%%%%%%%%%%%%%%%#:=%%%%%*=:..............................
.............................*%%*-:.-#%%+=%%%%%%%%%%%%%%%%==%%#-.:-*%%+.............................
...........................:#%+:......-#%%*+%%%%%%%%%%%%**%%#-......:*%#:...........................
..........................:*%*:.........-*%%%%%%%%%%%%%%%%*-.........:*%*:..........................
..........................=%%:............:+%%%%%%%%%%%%+:............:%%=..........................
.........................-%%:..-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#:..:%%-.........................
........................:%%=...+%=................................=%+...=%%:........................
.......................:#%+....=%+................................+%=....+%#:.......................
......................:*%#:....-%*:..............................:*%-....:#%*:......................
......................=%%:.:*+=:%*:............:+**=:............:*%:=+*:.:%%=......................
.....................:%%-...:-*%%#-............#%%%%*............-#%%*-:...-%%:.....................
.....................=%*:......:%%-............#%%%%*............-%%:......:*%=.....................
.....................=%#:......*%%=............:=**=.............=%%*:.....:*%=.....................
......................*%#-....=%%%+..............................+%%%=....:#%*:.....................
.......................=%%%#-:+%%%*..............................#%%%+:-*%%%+.......................
.........................-+#%%%%%%%******************************%%%%%%%#+-.........................
.............................:-+#%%=----------------------------=%%#+-:.............................
.................................-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#-.................................
....................................................................................................
..............######*:..................................-##-.:=-.....-###-...-%#-:%#-...............
..............#%+..=#%*:.:....:...:..::...::...:..:::...-%#-.=%*:...:*%#%*:..-%#-:%#-...............
..............#%+...:%%=+%*:.=%*.+%%##%%###%#-:%%%##%%+.-%#-+%%%#*:.-%#.*%=..-%#-:%#-...............
..............#%+...:%%=+%*:.=%*.+%+..*%*..*%=:%%-..-%%=-%#-.+%*...:%%-.-%%:.-%#-:%#-...............
..............#%+..:*%#:+%*:.=%*.+%+..*%+..*%=:%%-..-%%=-%#-.+%*...*%%%%%%%#:-%#-:%#-...............
..............#%%%%%#+:.-%%##%%*.+%+..*%+..*%=:%%%##%%+.-%#-.-#%%*=%%-...:#%+-%%*:%%#:..............
..............::::::......:-:.::.:::..:::..::::%%::--:...::....:-::::.....:::.:-:.:-:...............
..............................................:%%:..................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
....................................................................................................
"""
    print(logo)
    print("üóÑÔ∏è DumpItAll - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î")
    print("üîç Find It, Dump It, Save It!")
    print("=" * 88)

class UniversalBackup:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Drive
        self.CREDENTIALS_FILE = 'service-account-key.json'
        self.DRIVE_FOLDER_ID = os.getenv('DRIVE_FOLDER_ID', None)
        
        # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        self.BACKUP_DIR = os.getenv('BACKUP_DIR', './backups')
        os.makedirs(self.BACKUP_DIR, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.drive_service = self._init_drive_service()
        self.docker_client = self._init_docker_client()
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.discovered_databases = []
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏)
        self.auto_credentials = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –°–£–ë–î
        self.db_configs = {
            'postgresql': {
                'default_ports': [5432],
                'process_names': ['postgres', 'postgresql'],
                'backup_cmd': 'pg_dump',
                'docker_images': ['postgres', 'postgis/postgis', 'timescale/timescaledb']
            },
            'mysql': {
                'default_ports': [3306],
                'process_names': ['mysqld', 'mysql'],
                'backup_cmd': 'mysqldump',
                'docker_images': ['mysql', 'mariadb', 'percona']
            },
            'mongodb': {
                'default_ports': [27017],
                'process_names': ['mongod'],
                'backup_cmd': 'mongodump',
                'docker_images': ['mongo', 'mongodb/mongodb-community-server']
            },
            'redis': {
                'default_ports': [6379],
                'process_names': ['redis-server'],
                'backup_cmd': 'redis-cli',
                'docker_images': ['redis', 'bitnami/redis']
            },
            'sqlite': {
                'default_ports': [],
                'process_names': [],
                'backup_cmd': 'sqlite3',
                'docker_images': []
            }
        }

    def _init_drive_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Drive"""
        try:
            if os.path.exists(self.CREDENTIALS_FILE):
                credentials = Credentials.from_service_account_file(
                    self.CREDENTIALS_FILE,
                    scopes=['https://www.googleapis.com/auth/drive']
                )
                return build('drive', 'v3', credentials=credentials)
            else:
                logging.warning(f"–§–∞–π–ª {self.CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Drive API: {e}")
            return None

    def _init_docker_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            return docker.from_env()
        except Exception as e:
            logging.warning(f"Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return None

    def auto_discover_credentials(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö .env —Ñ–∞–π–ª–æ–≤ –Ω–∞ VPS"""
        credentials = {}
        found_files = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ .env —Ñ–∞–π–ª–æ–≤
        env_patterns = [
            '.env', '.env.*', '*.env',
            'env', 'env.*',
            '.environment', '*.environment',
            'config.env', 'config/*.env',
            'docker-compose.yml', 'docker-compose.yaml',
            'database.yml', 'database.yaml',
            'config.yml', 'config.yaml',
            'settings.py', 'settings.ini',
            'wp-config.php', 'configuration.php'
        ]
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ .env —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Å–µ–º—É VPS
        search_dirs = [
            '.', # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            '/home/*', '/home/*/*', '/home/*/*/*', # –î–æ–º–∞—à–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            '/var/www/*', '/var/www/*/*', '/var/www/*/*/*', # Web –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            '/opt/*', '/opt/*/*', # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            '/etc', '/etc/*', # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
            '/usr/local/*', '/usr/local/*/*', # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            '/srv/*', '/srv/*/*', # –°–µ—Ä–≤–∏—Å—ã
            '/app', '/app/*', # Docker –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            '/data/*', '/data/*/*' # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        ]
        
        logging.info("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Å–µ–º—É VPS...")
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        for search_dir in search_dirs:
            for pattern in env_patterns:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º glob –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å wildcards
                    import glob
                    search_path = os.path.join(search_dir, pattern) if search_dir != '.' else pattern
                    
                    for file_path in glob.glob(search_path, recursive=True):
                        if os.path.isfile(file_path) and file_path not in found_files:
                            found_files.append(file_path)
                            
                except Exception as e:
                    continue
        
        logging.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(found_files)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in found_files:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_ext = os.path.splitext(file_path)[1].lower()
                file_name = os.path.basename(file_path).lower()
                
                # –ü–∞—Ä—Å–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if 'docker-compose' in file_name and file_ext in ['.yml', '.yaml']:
                    self._parse_docker_compose(file_path, credentials)
                elif file_ext in ['.yml', '.yaml']:
                    self._parse_yaml_config(file_path, credentials)
                elif file_ext == '.php':
                    self._parse_php_config(file_path, credentials)
                elif file_ext == '.py':
                    self._parse_python_config(file_path, credentials)
                elif file_ext in ['.ini', '.cfg', '.conf']:
                    self._parse_ini_config(file_path, credentials)
                else:
                    # –ü–∞—Ä—Å–∏–º –∫–∞–∫ .env —Ñ–∞–π–ª
                    self._parse_env_file(file_path, credentials)
                    
            except Exception as e:
                logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {file_path}: {e}")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        self._parse_system_env(credentials)
        
        return credentials
    
    def _parse_env_file(self, file_path, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ .env —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8-sig', 'utf-8', 'cp1251', 'latin-1', 'iso-8859-1']
            content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as f:
                        content = f.read()
                        # –£–¥–∞–ª—è–µ–º BOM –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        content = content.lstrip('\ufeff')
                        break
                except UnicodeDecodeError:
                    continue
            
            if content is None:
                return
            
            logging.debug(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {file_path}")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ credentials
            db_patterns = {
                'postgresql': {
                    'password': ['POSTGRES_PASSWORD', 'PGPASSWORD', 'DB_PASSWORD', 'DATABASE_PASSWORD', 
                                'PG_PASSWORD', 'POSTGRESQL_PASSWORD', 'DB_PASS', 'PG_PASS'],
                    'user': ['POSTGRES_USER', 'PGUSER', 'DB_USER', 'DATABASE_USER', 
                            'PG_USER', 'POSTGRESQL_USER', 'DB_USERNAME'],
                    'host': ['POSTGRES_HOST', 'PGHOST', 'DB_HOST', 'DATABASE_HOST', 
                            'PG_HOST', 'POSTGRESQL_HOST'],
                    'port': ['POSTGRES_PORT', 'PGPORT', 'DB_PORT', 'DATABASE_PORT', 
                            'PG_PORT', 'POSTGRESQL_PORT'],
                    'database': ['POSTGRES_DB', 'PGDATABASE', 'DB_NAME', 'DATABASE_NAME', 
                                'PG_DATABASE', 'POSTGRESQL_DATABASE']
                },
                'mysql': {
                    'password': ['MYSQL_PASSWORD', 'MYSQL_ROOT_PASSWORD', 'MYSQL_PASS', 
                                'MARIADB_PASSWORD', 'MARIADB_ROOT_PASSWORD', 'DB_PASSWORD',
                                'DATABASE_PASSWORD', 'MYSQL_PWD'],
                    'user': ['MYSQL_USER', 'MYSQL_ROOT_USER', 'MARIADB_USER', 
                            'DB_USER', 'DATABASE_USER', 'MYSQL_USERNAME'],
                    'host': ['MYSQL_HOST', 'MARIADB_HOST', 'DB_HOST', 'DATABASE_HOST'],
                    'port': ['MYSQL_PORT', 'MARIADB_PORT', 'DB_PORT', 'DATABASE_PORT'],
                    'database': ['MYSQL_DATABASE', 'MARIADB_DATABASE', 'DB_NAME', 'DATABASE_NAME']
                },
                'mongodb': {
                    'password': ['MONGO_PASSWORD', 'MONGODB_PASSWORD', 'MONGO_PASS', 
                                'MONGO_INITDB_ROOT_PASSWORD', 'MONGODB_ROOT_PASSWORD',
                                'DB_PASSWORD', 'DATABASE_PASSWORD'],
                    'user': ['MONGO_USER', 'MONGODB_USER', 'MONGO_USERNAME',
                            'MONGO_INITDB_ROOT_USERNAME', 'MONGODB_ROOT_USER',
                            'DB_USER', 'DATABASE_USER'],
                    'host': ['MONGO_HOST', 'MONGODB_HOST', 'MONGO_URL', 'MONGODB_URL',
                            'DB_HOST', 'DATABASE_HOST'],
                    'port': ['MONGO_PORT', 'MONGODB_PORT', 'DB_PORT', 'DATABASE_PORT'],
                    'database': ['MONGO_DB', 'MONGODB_DB', 'MONGO_DATABASE', 'MONGODB_DATABASE',
                                'DB_NAME', 'DATABASE_NAME']
                },
                'redis': {
                    'password': ['REDIS_PASSWORD', 'REDIS_PASS', 'REDIS_AUTH', 
                                'REDIS_REQUIREPASS', 'CACHE_PASSWORD'],
                    'host': ['REDIS_HOST', 'REDIS_URL', 'CACHE_HOST'],
                    'port': ['REDIS_PORT', 'CACHE_PORT']
                }
            }
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫
            for line in content.split('\n'):
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line or line.startswith('#') or line.startswith('//'):
                    continue
                
                # –ò—â–µ–º –ø–∞—Ä—ã –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip().upper()
                    value = value.strip().strip('"\'`')
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if not value:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ë–î
                    for db_type, patterns in db_patterns.items():
                        for cred_type, pattern_list in patterns.items():
                            if key in pattern_list:
                                credentials.setdefault(db_type, {})[cred_type] = value
                                logging.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω {cred_type} –¥–ª—è {db_type}: {key} –≤ {file_path}")
                                
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ connection strings
                    if 'DATABASE_URL' in key or 'DB_URL' in key or 'CONNECTION_STRING' in key:
                        self._parse_connection_string(value, credentials)
                        
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ env —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def _parse_connection_string(self, conn_str, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ connection string"""
        try:
            # PostgreSQL: postgresql://user:password@host:port/database
            if 'postgresql://' in conn_str or 'postgres://' in conn_str:
                import re
                match = re.match(r'postgres(?:ql)?://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', conn_str)
                if match:
                    credentials.setdefault('postgresql', {}).update({
                        'user': match.group(1),
                        'password': match.group(2),
                        'host': match.group(3),
                        'port': match.group(4),
                        'database': match.group(5)
                    })
                    
            # MySQL: mysql://user:password@host:port/database
            elif 'mysql://' in conn_str:
                import re
                match = re.match(r'mysql://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', conn_str)
                if match:
                    credentials.setdefault('mysql', {}).update({
                        'user': match.group(1),
                        'password': match.group(2),
                        'host': match.group(3),
                        'port': match.group(4),
                        'database': match.group(5)
                    })
                    
            # MongoDB: mongodb://user:password@host:port/database
            elif 'mongodb://' in conn_str:
                import re
                match = re.match(r'mongodb://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', conn_str)
                if match:
                    credentials.setdefault('mongodb', {}).update({
                        'user': match.group(1),
                        'password': match.group(2),
                        'host': match.group(3),
                        'port': match.group(4),
                        'database': match.group(5)
                    })
                    
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ connection string: {e}")
    
    def _parse_docker_compose(self, file_path, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ docker-compose.yml —Ñ–∞–π–ª–∞"""
        try:
            import yaml
            with open(file_path, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
                
            if 'services' in data:
                for service_name, service in data['services'].items():
                    if 'environment' in service:
                        env = service['environment']
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if isinstance(env, list):
                            env_dict = {}
                            for item in env:
                                if '=' in item:
                                    k, v = item.split('=', 1)
                                    env_dict[k] = v
                            env = env_dict
                        
                        # –ò—â–µ–º credentials –≤ environment
                        if isinstance(env, dict):
                            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π env —Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ
                            env_content = '\n'.join([f"{k}={v}" for k, v in env.items()])
                            temp_file = '/tmp/temp_env_parse.env'
                            with open(temp_file, 'w') as tf:
                                tf.write(env_content)
                            self._parse_env_file(temp_file, credentials)
                            os.remove(temp_file)
                            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ docker-compose {file_path}: {e}")
    
    def _parse_yaml_config(self, file_path, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import yaml
            with open(file_path, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
                
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ credentials –≤ YAML
            def find_credentials(obj, path=""):
                if isinstance(obj, dict):
                    for key, value in obj.items():
                        lower_key = key.lower()
                        if any(word in lower_key for word in ['password', 'pass', 'pwd', 'secret']):
                            if isinstance(value, str) and value:
                                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ë–î –ø–æ –ø—É—Ç–∏
                                if 'postgres' in path.lower() or 'pg' in path.lower():
                                    credentials.setdefault('postgresql', {})['password'] = value
                                elif 'mysql' in path.lower() or 'maria' in path.lower():
                                    credentials.setdefault('mysql', {})['password'] = value
                                elif 'mongo' in path.lower():
                                    credentials.setdefault('mongodb', {})['password'] = value
                                elif 'redis' in path.lower():
                                    credentials.setdefault('redis', {})['password'] = value
                        find_credentials(value, path + "/" + key)
                elif isinstance(obj, list):
                    for item in obj:
                        find_credentials(item, path)
                        
            find_credentials(data)
            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML {file_path}: {e}")
    
    def _parse_php_config(self, file_path, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ PHP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (wp-config.php –∏ —Ç.–¥.)"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ PHP —Ñ–∞–π–ª–∞—Ö
            patterns = [
                (r"define\s*\(\s*['\"]DB_PASSWORD['\"]\s*,\s*['\"]([^'\"]+)['\"]\s*\)", 'mysql', 'password'),
                (r"define\s*\(\s*['\"]DB_USER['\"]\s*,\s*['\"]([^'\"]+)['\"]\s*\)", 'mysql', 'user'),
                (r"define\s*\(\s*['\"]DB_HOST['\"]\s*,\s*['\"]([^'\"]+)['\"]\s*\)", 'mysql', 'host'),
                (r"define\s*\(\s*['\"]DB_NAME['\"]\s*,\s*['\"]([^'\"]+)['\"]\s*\)", 'mysql', 'database'),
                (r"\$db\s*\[\s*['\"]password['\"]\s*\]\s*=\s*['\"]([^'\"]+)['\"]", 'mysql', 'password'),
                (r"\$db\s*\[\s*['\"]user['\"]\s*\]\s*=\s*['\"]([^'\"]+)['\"]", 'mysql', 'user'),
                (r"\$db\s*\[\s*['\"]host['\"]\s*\]\s*=\s*['\"]([^'\"]+)['\"]", 'mysql', 'host'),
            ]
            
            for pattern, db_type, cred_type in patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    credentials.setdefault(db_type, {})[cred_type] = matches[0]
                    
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PHP {file_path}: {e}")
    
    def _parse_python_config(self, file_path, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ Python –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (settings.py –∏ —Ç.–¥.)"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Django settings.py
            patterns = [
                (r"DATABASES\s*=\s*{[^}]+}", None, None),  # –í–µ—Å—å –±–ª–æ–∫ DATABASES
                (r"['\"]PASSWORD['\"]\s*:\s*['\"]([^'\"]+)['\"]", None, 'password'),
                (r"['\"]USER['\"]\s*:\s*['\"]([^'\"]+)['\"]", None, 'user'),
                (r"['\"]HOST['\"]\s*:\s*['\"]([^'\"]+)['\"]", None, 'host'),
                (r"['\"]PORT['\"]\s*:\s*['\"]([^'\"]+)['\"]", None, 'port'),
                (r"['\"]NAME['\"]\s*:\s*['\"]([^'\"]+)['\"]", None, 'database'),
                (r"['\"]ENGINE['\"]\s*:\s*['\"][^'\"]*\.([^'\"\.]+)['\"]", None, 'engine'),
            ]
            
            # –ò—â–µ–º –±–ª–æ–∫ DATABASES
            db_block = re.search(patterns[0][0], content, re.DOTALL)
            if db_block:
                block_content = db_block.group(0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –ø–æ ENGINE
                engine_match = re.search(patterns[6][0], block_content)
                db_type = None
                if engine_match:
                    engine = engine_match.group(1).lower()
                    if 'postgresql' in engine or 'postgres' in engine:
                        db_type = 'postgresql'
                    elif 'mysql' in engine:
                        db_type = 'mysql'
                    elif 'mongodb' in engine:
                        db_type = 'mongodb'
                
                if db_type:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º credentials
                    for pattern, _, cred_type in patterns[1:6]:
                        match = re.search(pattern, block_content)
                        if match and cred_type:
                            credentials.setdefault(db_type, {})[cred_type] = match.group(1)
                            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Python {file_path}: {e}")
    
    def _parse_ini_config(self, file_path, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ INI/CFG –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import configparser
            config = configparser.ConfigParser()
            config.read(file_path, encoding='utf-8')
            
            # –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å –ë–î
            for section in config.sections():
                section_lower = section.lower()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–µ–∫—Ü–∏–∏
                db_type = None
                if 'postgres' in section_lower or 'pg' in section_lower:
                    db_type = 'postgresql'
                elif 'mysql' in section_lower or 'maria' in section_lower:
                    db_type = 'mysql'
                elif 'mongo' in section_lower:
                    db_type = 'mongodb'
                elif 'redis' in section_lower:
                    db_type = 'redis'
                elif 'database' in section_lower or 'db' in section_lower:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    if config.has_option(section, 'driver'):
                        driver = config.get(section, 'driver').lower()
                        if 'postgres' in driver:
                            db_type = 'postgresql'
                        elif 'mysql' in driver:
                            db_type = 'mysql'
                        elif 'mongo' in driver:
                            db_type = 'mongodb'
                
                if db_type:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    param_mappings = {
                        'password': ['password', 'pass', 'pwd', 'secret'],
                        'user': ['user', 'username', 'login', 'uid'],
                        'host': ['host', 'hostname', 'server', 'address'],
                        'port': ['port'],
                        'database': ['database', 'db', 'dbname', 'name']
                    }
                    
                    for cred_type, possible_keys in param_mappings.items():
                        for key in possible_keys:
                            if config.has_option(section, key):
                                value = config.get(section, key)
                                if value:
                                    credentials.setdefault(db_type, {})[cred_type] = value
                                    break
                                    
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ INI {file_path}: {e}")
    
    def _parse_system_env(self, credentials):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            for key, value in os.environ.items():
                key_upper = key.upper()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —á—Ç–æ –∏ –¥–ª—è .env —Ñ–∞–π–ª–æ–≤
                # PostgreSQL
                if key_upper in ['POSTGRES_PASSWORD', 'PGPASSWORD', 'DB_PASSWORD'] and value:
                    credentials.setdefault('postgresql', {})['password'] = value
                elif key_upper in ['POSTGRES_USER', 'PGUSER', 'DB_USER'] and value:
                    credentials.setdefault('postgresql', {})['user'] = value
                    
                # MySQL
                elif key_upper in ['MYSQL_PASSWORD', 'MYSQL_ROOT_PASSWORD'] and value:
                    credentials.setdefault('mysql', {})['password'] = value
                elif key_upper in ['MYSQL_USER', 'MYSQL_ROOT_USER'] and value:
                    credentials.setdefault('mysql', {})['user'] = value
                    
                # MongoDB
                elif key_upper in ['MONGO_PASSWORD', 'MONGODB_PASSWORD'] and value:
                    credentials.setdefault('mongodb', {})['password'] = value
                elif key_upper in ['MONGO_USER', 'MONGODB_USER'] and value:
                    credentials.setdefault('mongodb', {})['user'] = value
                    
                # Redis
                elif key_upper in ['REDIS_PASSWORD'] and value:
                    credentials.setdefault('redis', {})['password'] = value
                    
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")

    def discover_system_databases(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        logging.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        system_dbs = []
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'connections']):
            try:
                proc_info = proc.info
                proc_name = proc_info['name'].lower()
                
                for db_type, config in self.db_configs.items():
                    if any(name in proc_name for name in config['process_names']):
                        db_info = self._analyze_system_process(proc, db_type, config)
                        if db_info:
                            system_dbs.append(db_info)
                            
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        # –ü–æ–∏—Å–∫ SQLite —Ñ–∞–π–ª–æ–≤
        sqlite_dbs = self._find_sqlite_databases()
        system_dbs.extend(sqlite_dbs)
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(system_dbs)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return system_dbs

    def _analyze_system_process(self, proc, db_type, config):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –°–£–ë–î"""
        try:
            connections = proc.connections() if hasattr(proc, 'connections') else []
            cmdline = proc.cmdline()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
            port = None
            for conn in connections:
                if conn.status == 'LISTEN' and conn.laddr.port in config['default_ports']:
                    port = conn.laddr.port
                    break
            
            if not port:
                port = config['default_ports'][0] if config['default_ports'] else None
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
            data_dir = self._extract_data_directory(cmdline, db_type)
            
            return {
                'type': db_type,
                'source': 'system',
                'host': 'localhost',
                'port': port,
                'pid': proc.pid,
                'data_dir': data_dir,
                'cmdline': ' '.join(cmdline) if cmdline else '',
                'databases': self._get_database_list(db_type, 'localhost', port)
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.pid}: {e}")
            return None

    def _extract_data_directory(self, cmdline, db_type):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if not cmdline:
            return None
            
        cmdline_str = ' '.join(cmdline)
        
        patterns = {
            'postgresql': ['-D', '--data-directory'],
            'mysql': ['--datadir'],
            'mongodb': ['--dbpath']
        }
        
        if db_type in patterns:
            for pattern in patterns[db_type]:
                if pattern in cmdline_str:
                    parts = cmdline_str.split()
                    try:
                        idx = parts.index(pattern)
                        if idx + 1 < len(parts):
                            return parts[idx + 1]
                    except ValueError:
                        continue
        
        return None

    def discover_docker_databases(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö"""
        if not self.docker_client:
            return []
            
        logging.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        docker_dbs = []
        
        try:
            containers = self.docker_client.containers.list()
            
            for container in containers:
                db_info = self._analyze_docker_container(container)
                if db_info:
                    docker_dbs.extend(db_info)
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Docker: {e}")
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(docker_dbs)} –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Docker")
        return docker_dbs

    def _analyze_docker_container(self, container):
        """–ê–Ω–∞–ª–∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            image_name = container.image.tags[0] if container.image.tags else ''
            container_info = []
            
            for db_type, config in self.db_configs.items():
                if any(img in image_name.lower() for img in config['docker_images']):
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
                    ports = container.attrs.get('NetworkSettings', {}).get('Ports', {})
                    exposed_ports = []
                    
                    for port_info in ports.values():
                        if port_info:
                            for binding in port_info:
                                if binding.get('HostPort'):
                                    exposed_ports.append(int(binding['HostPort']))
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    env_vars = {}
                    for env in container.attrs.get('Config', {}).get('Env', []):
                        if '=' in env:
                            key, value = env.split('=', 1)
                            env_vars[key] = value
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    credentials = self._extract_docker_credentials(env_vars, db_type)
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
                    databases = self._get_docker_database_list(container, db_type, credentials)
                    
                    container_info.append({
                        'type': db_type,
                        'source': 'docker',
                        'container_id': container.id,
                        'container_name': container.name,
                        'image': image_name,
                        'host': 'localhost',
                        'ports': exposed_ports,
                        'credentials': credentials,
                        'databases': databases,
                        'volumes': self._get_container_volumes(container)
                    })
            
            return container_info
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container.name}: {e}")
            return []

    def _extract_docker_credentials(self, env_vars, db_type):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        credentials = {}
        
        env_mappings = {
            'postgresql': {
                'user': ['POSTGRES_USER', 'POSTGRESQL_USER'],
                'password': ['POSTGRES_PASSWORD', 'POSTGRESQL_PASSWORD'],
                'database': ['POSTGRES_DB', 'POSTGRESQL_DATABASE']
            },
            'mysql': {
                'user': ['MYSQL_USER', 'MARIADB_USER'],
                'password': ['MYSQL_PASSWORD', 'MARIADB_PASSWORD', 'MYSQL_ROOT_PASSWORD'],
                'database': ['MYSQL_DATABASE', 'MARIADB_DATABASE']
            },
            'mongodb': {
                'user': ['MONGO_INITDB_ROOT_USERNAME'],
                'password': ['MONGO_INITDB_ROOT_PASSWORD'],
                'database': ['MONGO_INITDB_DATABASE']
            }
        }
        
        if db_type in env_mappings:
            mapping = env_mappings[db_type]
            for cred_type, env_keys in mapping.items():
                for env_key in env_keys:
                    if env_key in env_vars:
                        credentials[cred_type] = env_vars[env_key]
                        break
        
        return credentials

    def _get_container_volumes(self, container):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        volumes = []
        mounts = container.attrs.get('Mounts', [])
        
        for mount in mounts:
            volumes.append({
                'source': mount.get('Source'),
                'destination': mount.get('Destination'),
                'type': mount.get('Type')
            })
        
        return volumes

    def _find_sqlite_databases(self):
        """–ü–æ–∏—Å–∫ SQLite —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        sqlite_dbs = []
        search_paths = [
            '/var/lib',
            '/opt',
            '/home',
            '/usr/local',
            '/tmp'
        ]
        
        sqlite_extensions = ['*.db', '*.sqlite', '*.sqlite3']
        
        for search_path in search_paths:
            if os.path.exists(search_path):
                for ext in sqlite_extensions:
                    try:
                        files = glob.glob(os.path.join(search_path, '**', ext), recursive=True)
                        for file_path in files:
                            if self._is_sqlite_database(file_path):
                                sqlite_dbs.append({
                                    'type': 'sqlite',
                                    'source': 'system',
                                    'file_path': file_path,
                                    'size': os.path.getsize(file_path),
                                    'databases': [os.path.basename(file_path)]
                                })
                    except (PermissionError, OSError):
                        continue
        
        return sqlite_dbs

    def _is_sqlite_database(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""
        try:
            with open(file_path, 'rb') as f:
                header = f.read(16)
                return header.startswith(b'SQLite format 3\x00')
        except:
            return False

    def _get_database_list(self, db_type, host, port):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –°–£–ë–î"""
        databases = []
        
        try:
            if db_type == 'postgresql':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env = os.environ.copy()
                auto_creds = self.auto_credentials.get('postgresql', {})
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = auto_creds.get('user') or env.get('POSTGRES_USER') or 'postgres'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–æ–ª—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞–≤—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π -> –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -> –ø—É—Å—Ç–æ–π)
                password = (auto_creds.get('password') or 
                           env.get('POSTGRES_PASSWORD') or 
                           env.get('PGPASSWORD') or '')
                env['PGPASSWORD'] = password
                
                cmd = ['psql', '-h', host, '-p', str(port), '-U', user, '-l', '-t']
                
                if auto_creds.get('password'):
                    logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è PostgreSQL")
                elif password:
                    logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL")
                else:
                    logging.info(f"üîì –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –±–µ–∑ –ø–∞—Ä–æ–ª—è")
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5, env=env)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if '|' in line:
                            db_name = line.split('|')[0].strip()
                            if db_name and db_name not in ['template0', 'template1']:
                                databases.append(db_name)
                else:
                    logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {result.stderr}")
            
            elif db_type == 'mysql':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env = os.environ.copy()
                auto_creds = self.auto_credentials.get('mysql', {})
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = auto_creds.get('user') or env.get('MYSQL_USER') or 'root'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                password = (auto_creds.get('password') or 
                           env.get('MYSQL_PASSWORD') or 
                           env.get('MYSQL_ROOT_PASSWORD') or '')
                
                cmd = ['mysql', '-h', host, '-P', str(port), '-u', user, '-e', 'SHOW DATABASES;']
                
                if password:
                    cmd.insert(-2, f'-p{password}')  # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ -e
                    if auto_creds.get('password'):
                        logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è MySQL")
                    else:
                        logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è MySQL")
                else:
                    logging.info(f"üîì –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL –±–µ–∑ –ø–∞—Ä–æ–ª—è")
                    
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5, env=env)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        db_name = line.strip()
                        if db_name and db_name not in ['Database', 'information_schema', 'performance_schema', 'mysql', 'sys']:
                            databases.append(db_name)
                else:
                    logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL: {result.stderr}")
            
            elif db_type == 'mongodb':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env = os.environ.copy()
                auto_creds = self.auto_credentials.get('mongodb', {})
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = auto_creds.get('user') or env.get('MONGO_USER') or 'admin'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                password = (auto_creds.get('password') or 
                           env.get('MONGO_PASSWORD') or '')
                
                cmd = ['mongo', '--host', f"{host}:{port}"]
                
                if password:
                    cmd.extend(['--username', user, '--password', password])
                    if auto_creds.get('password'):
                        logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è MongoDB")
                    else:
                        logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è MongoDB")
                else:
                    logging.info(f"üîì –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB –±–µ–∑ –ø–∞—Ä–æ–ª—è")
                
                cmd.extend(['--eval', 'db.adminCommand("listDatabases").databases.forEach(function(db) { print(db.name) })', '--quiet'])
                    
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5, env=env)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        db_name = line.strip()
                        if db_name and db_name not in ['admin', 'local', 'config']:
                            databases.append(db_name)
                else:
                    logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: {result.stderr}")
            
            elif db_type == 'redis':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env = os.environ.copy()
                auto_creds = self.auto_credentials.get('redis', {})
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                password = (auto_creds.get('password') or 
                           env.get('REDIS_PASSWORD') or '')
                
                cmd = ['redis-cli', '-h', host, '-p', str(port)]
                
                if password:
                    cmd.extend(['-a', password])
                    if auto_creds.get('password'):
                        logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è Redis")
                    else:
                        logging.info(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Redis")
                else:
                    logging.info(f"üîì –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –±–µ–∑ –ø–∞—Ä–æ–ª—è")
                
                cmd.extend(['INFO', 'keyspace'])
                    
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5, env=env)
                if result.returncode == 0:
                    # –î–ª—è Redis –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –ë–î
                    databases.append('redis_db')
                else:
                    logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {result.stderr}")
                            
        except subprocess.TimeoutExpired:
            logging.warning(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ë–î –¥–ª—è {db_type} –Ω–∞ {host}:{port}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î –¥–ª—è {db_type}: {e}")
        
        return databases

    def _get_docker_database_list(self, container, db_type, credentials):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        databases = []
        
        try:
            if db_type == 'postgresql':
                cmd = ['psql', '-U', credentials.get('user', 'postgres'), '-l', '-t', '--no-password']
                env = {'PGPASSWORD': credentials.get('password', '')} if credentials.get('password') else {}
            elif db_type == 'mysql':
                user = credentials.get('user', 'root')
                password = credentials.get('password', '')
                if password:
                    cmd = ['mysql', '-u', user, f'-p{password}', '-e', 'SHOW DATABASES;']
                else:
                    cmd = ['mysql', '-u', user, '-e', 'SHOW DATABASES;']
                env = {}
            elif db_type == 'mongodb':
                user = credentials.get('user', 'admin')
                password = credentials.get('password', '')
                if password:
                    cmd = ['mongo', '--username', user, '--password', password, '--eval', 
                           'db.adminCommand("listDatabases").databases.forEach(function(db) { print(db.name) })', '--quiet']
                else:
                    cmd = ['mongo', '--eval', 
                           'db.adminCommand("listDatabases").databases.forEach(function(db) { print(db.name) })', '--quiet']
                env = {}
            elif db_type == 'redis':
                password = credentials.get('password', '')
                if password:
                    cmd = ['redis-cli', '-a', password, 'INFO', 'keyspace']
                else:
                    cmd = ['redis-cli', 'INFO', 'keyspace']
                env = {}
            else:
                return []
            
            result = container.exec_run(cmd, environment=env)
            if result.exit_code == 0:
                output = result.output.decode('utf-8')
                
                if db_type == 'postgresql':
                    for line in output.split('\n'):
                        if '|' in line:
                            db_name = line.split('|')[0].strip()
                            if db_name and db_name not in ['template0', 'template1']:
                                databases.append(db_name)
                
                elif db_type == 'mysql':
                    for line in output.split('\n'):
                        db_name = line.strip()
                        if db_name and db_name not in ['Database', 'information_schema', 'performance_schema', 'mysql', 'sys']:
                            databases.append(db_name)
                
                elif db_type == 'mongodb':
                    for line in output.split('\n'):
                        db_name = line.strip()
                        if db_name and db_name not in ['admin', 'local', 'config']:
                            databases.append(db_name)
                
                elif db_type == 'redis':
                    # –î–ª—è Redis –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –ë–î
                    databases.append('redis_db')
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {container.name}: {result.output.decode('utf-8')}")
                            
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {container.name}: {e}")
        
        return databases

    def scan_network_ports(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –°–£–ë–î"""
        logging.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤...")
        
        port_databases = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
        open_ports = self._get_open_ports()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –°–£–ë–î –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        priority_ports = {
            5432: 'postgresql',
            3306: 'mysql',
            27017: 'mongodb', 
            6379: 'redis',
            1521: 'oracle',
            1433: 'mssql',
            50000: 'db2',
            8086: 'influxdb',
            9200: 'elasticsearch',
            5984: 'couchdb'
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –ë–î
        for port, expected_type in priority_ports.items():
            if port in open_ports:
                db_info = self._probe_database_port('localhost', port, expected_type)
                if db_info:
                    port_databases.append(db_info)
                    logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ {expected_type} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
        for port in open_ports:
            if port not in priority_ports:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ë–î –ø–æ –±–∞–Ω–Ω–µ—Ä—É/–æ—Ç–∫–ª–∏–∫—É
                db_info = self._probe_unknown_port('localhost', port)
                if db_info:
                    port_databases.append(db_info)
                    logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ë–î {db_info['type']} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(port_databases)} –ë–î —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
        return port_databases

    def _get_open_ports(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        open_ports = set()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º psutil –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            connections = psutil.net_connections(kind='inet')
            
            for conn in connections:
                if conn.status == 'LISTEN' and conn.laddr:
                    port = conn.laddr.port
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã < 1024 (–∫—Ä–æ–º–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ë–î)
                    if port >= 1024 or port in [80, 443, 22, 21, 25, 53, 110, 143, 993, 995]:
                        continue
                    if port in [5432, 3306, 27017, 6379, 1521, 1433, 50000, 8086, 9200, 5984]:
                        open_ports.add(port)
                    elif port >= 1024:
                        open_ports.add(port)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –ë–î, –¥–∞–∂–µ –µ—Å–ª–∏ psutil –∏—Ö –Ω–µ –≤–∏–¥–∏—Ç
            standard_db_ports = [5432, 3306, 27017, 6379, 1521, 1433, 50000, 8086, 9200, 5984]
            for port in standard_db_ports:
                if self._is_port_open('localhost', port):
                    open_ports.add(port)
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {e}")
        
        return open_ports

    def _is_port_open(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç"""
        import socket
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(2)
                result = sock.connect_ex((host, port))
                return result == 0
        except:
            return False

    def _probe_database_port(self, host, port, expected_type):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π –°–£–ë–î"""
        try:
            if expected_type == 'postgresql':
                return self._probe_postgresql(host, port)
            elif expected_type == 'mysql':
                return self._probe_mysql(host, port)
            elif expected_type == 'mongodb':
                return self._probe_mongodb(host, port)
            elif expected_type == 'redis':
                return self._probe_redis(host, port)
            elif expected_type == 'oracle':
                return self._probe_oracle(host, port)
            elif expected_type == 'mssql':
                return self._probe_mssql(host, port)
            else:
                return None
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {expected_type} –Ω–∞ {host}:{port}: {e}")
            return None

    def _probe_unknown_port(self, host, port):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ë–î –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –ø–æ—Ä—Ç—É"""
        import socket
        
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(5)
                sock.connect((host, port))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                try:
                    sock.send(b'\n')
                    response = sock.recv(1024)
                    
                    response_str = response.decode('utf-8', errors='ignore').lower()
                    
                    # –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–Ω–µ—Ä–æ–≤/–æ—Ç–∫–ª–∏–∫–æ–≤
                    if 'postgresql' in response_str or 'postgres' in response_str:
                        return self._probe_postgresql(host, port)
                    elif 'mysql' in response_str or 'mariadb' in response_str:
                        return self._probe_mysql(host, port)
                    elif 'mongodb' in response_str or 'mongo' in response_str:
                        return self._probe_mongodb(host, port)
                    elif '+pong' in response_str or 'redis' in response_str:
                        return self._probe_redis(host, port)
                    elif 'elasticsearch' in response_str:
                        return self._probe_elasticsearch(host, port)
                    elif 'couchdb' in response_str:
                        return self._probe_couchdb(host, port)
                        
                except:
                    pass
                    
        except Exception as e:
            logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ë–î –Ω–∞ {host}:{port}: {e}")
        
        return None

    def _probe_postgresql(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
            import subprocess
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            auto_creds = self.auto_credentials.get('postgresql', {})
            user = auto_creds.get('user', 'postgres')
            password = auto_creds.get('password', '')
            
            env = os.environ.copy()
            env['PGPASSWORD'] = password
            
            cmd = ['psql', '-h', host, '-p', str(port), '-U', user, '-d', 'template1', '-c', '\\l', '-t']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10, env=env)
            
            databases = []
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if '|' in line:
                        db_name = line.split('|')[0].strip()
                        if db_name and db_name not in ['template0', 'template1']:
                            databases.append(db_name)
            
            return {
                'type': 'postgresql',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': databases,
                'connection_tested': result.returncode == 0,
                'auth_method': 'password' if password else 'trust'
            }
            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL {host}:{port}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î
            return {
                'type': 'postgresql',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': [],
                'connection_tested': False,
                'auth_method': 'unknown'
            }

    def _probe_mysql(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ MySQL/MariaDB"""
        try:
            import subprocess
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            auto_creds = self.auto_credentials.get('mysql', {})
            user = auto_creds.get('user', 'root')
            password = auto_creds.get('password', '')
            
            cmd = ['mysql', '-h', host, '-P', str(port), '-u', user, '-e', 'SHOW DATABASES;']
            if password:
                cmd.insert(-2, f'-p{password}')
                
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            databases = []
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    db_name = line.strip()
                    if db_name and db_name not in ['Database', 'information_schema', 'performance_schema', 'mysql', 'sys']:
                        databases.append(db_name)
            
            return {
                'type': 'mysql',
                'source': 'network_scan', 
                'host': host,
                'port': port,
                'databases': databases,
                'connection_tested': result.returncode == 0,
                'auth_method': 'password' if password else 'no_password'
            }
            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MySQL {host}:{port}: {e}")
            return {
                'type': 'mysql',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': [],
                'connection_tested': False,
                'auth_method': 'unknown'
            }

    def _probe_mongodb(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB"""
        try:
            import subprocess
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            auto_creds = self.auto_credentials.get('mongodb', {})
            user = auto_creds.get('user', 'admin')
            password = auto_creds.get('password', '')
            
            cmd = ['mongo', '--host', f"{host}:{port}"]
            if password:
                cmd.extend(['--username', user, '--password', password])
                
            cmd.extend(['--eval', 'db.adminCommand("listDatabases").databases.forEach(function(db) { print(db.name) })', '--quiet'])
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            databases = []
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    db_name = line.strip()
                    if db_name and db_name not in ['admin', 'local', 'config']:
                        databases.append(db_name)
            
            return {
                'type': 'mongodb',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': databases,
                'connection_tested': result.returncode == 0,
                'auth_method': 'password' if password else 'no_auth'
            }
            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MongoDB {host}:{port}: {e}")
            return {
                'type': 'mongodb',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': [],
                'connection_tested': False,
                'auth_method': 'unknown'
            }

    def _probe_redis(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis"""
        try:
            import subprocess
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            auto_creds = self.auto_credentials.get('redis', {})
            password = auto_creds.get('password', '')
            
            cmd = ['redis-cli', '-h', host, '-p', str(port)]
            if password:
                cmd.extend(['-a', password])
                
            cmd.append('ping')
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0 and 'PONG' in result.stdout:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
                info_cmd = cmd[:-1] + ['info', 'keyspace']
                info_result = subprocess.run(info_cmd, capture_output=True, text=True, timeout=5)
                
                databases = []
                if info_result.returncode == 0:
                    for line in info_result.stdout.split('\n'):
                        if line.startswith('db'):
                            db_num = line.split(':')[0]
                            databases.append(db_num)
                
                if not databases:
                    databases = ['db0']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Redis –∏—Å–ø–æ–ª—å–∑—É–µ—Ç db0
                
                return {
                    'type': 'redis',
                    'source': 'network_scan',
                    'host': host,
                    'port': port,
                    'databases': databases,
                    'connection_tested': True,
                    'auth_method': 'password' if password else 'no_auth'
                }
            
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis {host}:{port}: {e}")
        
        return None

    def _probe_elasticsearch(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Elasticsearch"""
        try:
            import requests
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Elasticsearch API
            response = requests.get(f'http://{host}:{port}/', timeout=5)
            if response.status_code == 200 and 'elasticsearch' in response.text.lower():
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
                indices_response = requests.get(f'http://{host}:{port}/_cat/indices?format=json', timeout=5)
                databases = []
                if indices_response.status_code == 200:
                    indices = indices_response.json()
                    databases = [idx['index'] for idx in indices if not idx['index'].startswith('.')]
                
                return {
                    'type': 'elasticsearch',
                    'source': 'network_scan',
                    'host': host,
                    'port': port,
                    'databases': databases,
                    'connection_tested': True,
                    'auth_method': 'no_auth'
                }
                
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Elasticsearch {host}:{port}: {e}")
        
        return None

    def _probe_couchdb(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CouchDB"""
        try:
            import requests
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CouchDB API
            response = requests.get(f'http://{host}:{port}/', timeout=5)
            if response.status_code == 200 and 'couchdb' in response.text.lower():
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
                dbs_response = requests.get(f'http://{host}:{port}/_all_dbs', timeout=5)
                databases = []
                if dbs_response.status_code == 200:
                    databases = [db for db in dbs_response.json() if not db.startswith('_')]
                
                return {
                    'type': 'couchdb',
                    'source': 'network_scan',
                    'host': host,
                    'port': port,
                    'databases': databases,
                    'connection_tested': True,
                    'auth_method': 'no_auth'
                }
                
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CouchDB {host}:{port}: {e}")
        
        return None

    def _probe_oracle(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Oracle Database"""
        try:
            # Oracle —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                'type': 'oracle',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': [],
                'connection_tested': False,
                'auth_method': 'unknown',
                'note': 'Oracle detected by port, manual configuration required'
            }
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Oracle {host}:{port}: {e}")
        
        return None

    def _probe_mssql(self, host, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Microsoft SQL Server"""
        try:
            # SQL Server —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                'type': 'mssql',
                'source': 'network_scan',
                'host': host,
                'port': port,
                'databases': [],
                'connection_tested': False,
                'auth_method': 'unknown',
                'note': 'SQL Server detected by port, manual configuration required'
            }
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SQL Server {host}:{port}: {e}")
        
        return None

    def discover_all_databases(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        logging.info("=" * 60)
        logging.info("–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        logging.info("=" * 60)
        
        self.discovered_databases = []
        
        # –≠—Ç–∞–ø 0: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logging.info("üîê –≠—Ç–∞–ø 0: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        self.auto_credentials = self.auto_discover_credentials()
        self._print_discovered_credentials()
        
        # 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        logging.info("üîç –≠—Ç–∞–ø 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤")
        port_dbs = self.scan_network_ports()
        self.discovered_databases.extend(port_dbs)
        
        # 2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ë–î
        logging.info("üñ•Ô∏è –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        system_dbs = self.discover_system_databases()
        self.discovered_databases.extend(system_dbs)
        
        # 3. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        logging.info("üê≥ –≠—Ç–∞–ø 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        docker_dbs = self.discover_docker_databases()
        self.discovered_databases.extend(docker_dbs)
        
        # 4. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self._remove_duplicate_databases()
        
        logging.info("=" * 60)
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(self.discovered_databases)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ë–î")
        logging.info("=" * 60)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self._save_discovery_report()
        self._print_discovery_summary()
        
        return self.discovered_databases

    def _remove_duplicate_databases(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ë–î"""
        unique_dbs = []
        seen = set()
        
        for db in self.discovered_databases:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ë–î
            key = f"{db['type']}:{db.get('host', 'localhost')}:{db.get('port', 'unknown')}"
            
            if key not in seen:
                seen.add(key)
                unique_dbs.append(db)
            else:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                existing_db = next(d for d in unique_dbs if 
                                 f"{d['type']}:{d.get('host', 'localhost')}:{d.get('port', 'unknown')}" == key)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
                existing_databases = set(existing_db.get('databases', []))
                new_databases = set(db.get('databases', []))
                existing_db['databases'] = list(existing_databases.union(new_databases))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                sources = existing_db.get('sources', [existing_db.get('source', 'unknown')])
                if db.get('source') not in sources:
                    sources.append(db.get('source'))
                existing_db['sources'] = sources
        
        self.discovered_databases = unique_dbs
        logging.info(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(unique_dbs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ë–î")

    def _print_discovery_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏"""
        logging.info("\nüìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –û–ë –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ò:")
        
        by_type = {}
        by_source = {}
        total_databases = 0
        
        for db in self.discovered_databases:
            db_type = db['type']
            sources = db.get('sources', [db.get('source', 'unknown')])
            databases_count = len(db.get('databases', []))
            
            by_type[db_type] = by_type.get(db_type, 0) + 1
            total_databases += databases_count
            
            for source in sources:
                by_source[source] = by_source.get(source, 0) + 1
        
        logging.info(f"üìà –í—Å–µ–≥–æ –°–£–ë–î: {len(self.discovered_databases)}")
        logging.info(f"üìä –í—Å–µ–≥–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {total_databases}")
        
        logging.info("\nüîß –ü–æ —Ç–∏–ø–∞–º –°–£–ë–î:")
        for db_type, count in sorted(by_type.items()):
            logging.info(f"  {db_type}: {count}")
        
        logging.info("\nüîç –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:")
        for source, count in sorted(by_source.items()):
            logging.info(f"  {source}: {count}")
        
        logging.info("\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ discovery_report_*.json")

    def _save_discovery_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ë–î"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = os.path.join(self.BACKUP_DIR, f'discovery_report_{timestamp}.json')
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.discovered_databases, f, indent=2, ensure_ascii=False, default=str)
            logging.info(f"–û—Ç—á–µ—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

    def backup_database(self, db_info):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ë–î"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if db_info['source'] == 'system' or db_info['source'] == 'network_scan':
            return self._backup_system_database(db_info, timestamp)
        elif db_info['source'] == 'docker':
            return self._backup_docker_database(db_info, timestamp)
        
        return None

    def _backup_system_database(self, db_info, timestamp):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î"""
        backups = []
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not db_info.get('databases'):
            logging.warning(f"–ù–µ—Ç –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {db_info['type']} –Ω–∞ {db_info.get('host', 'localhost')}:{db_info.get('port', 'unknown')}")
            return backups
        
        for database in db_info.get('databases', []):
            try:
                if db_info['type'] == 'postgresql':
                    backup_file = f"pg_{db_info.get('host', 'localhost')}_{db_info.get('port', 5432)}_{database}_{timestamp}.sql"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    auto_creds = self.auto_credentials.get('postgresql', {})
                    user = auto_creds.get('user', 'postgres')
                    password = auto_creds.get('password', '')
                    
                    cmd = [
                        'pg_dump',
                        '-h', db_info.get('host', 'localhost'),
                        '-p', str(db_info.get('port', 5432)),
                        '-U', user,
                        '--format=custom',
                        '--no-password',
                        '--file', backup_path,
                        database
                    ]
                    
                    env = os.environ.copy()
                    env['PGPASSWORD'] = password
                    
                elif db_info['type'] == 'mysql':
                    backup_file = f"mysql_{db_info.get('host', 'localhost')}_{db_info.get('port', 3306)}_{database}_{timestamp}.sql"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    auto_creds = self.auto_credentials.get('mysql', {})
                    user = auto_creds.get('user', 'root')
                    password = auto_creds.get('password', '')
                    
                    cmd = [
                        'mysqldump',
                        '-h', db_info.get('host', 'localhost'),
                        '-P', str(db_info.get('port', 3306)),
                        '-u', user,
                        '--single-transaction',
                        '--routines',
                        '--triggers',
                        database
                    ]
                    
                    if password:
                        cmd.insert(-1, f'-p{password}')
                        
                    env = os.environ.copy()
                    
                    with open(backup_path, 'w') as f:
                        result = subprocess.run(cmd, stdout=f, stderr=subprocess.PIPE, env=env, text=True)
                        
                elif db_info['type'] == 'mongodb':
                    backup_dir = f"mongo_{db_info.get('host', 'localhost')}_{db_info.get('port', 27017)}_{database}_{timestamp}"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_dir)
                    os.makedirs(backup_path, exist_ok=True)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    auto_creds = self.auto_credentials.get('mongodb', {})
                    user = auto_creds.get('user', 'admin')
                    password = auto_creds.get('password', '')
                    
                    cmd = [
                        'mongodump',
                        '--host', f"{db_info.get('host', 'localhost')}:{db_info.get('port', 27017)}",
                        '--db', database,
                        '--out', backup_path
                    ]
                    
                    if password:
                        cmd.extend(['--username', user, '--password', password])
                        
                    env = os.environ.copy()
                    result = subprocess.run(cmd, capture_output=True, text=True, env=env)
                    
                elif db_info['type'] == 'redis':
                    backup_file = f"redis_{db_info.get('host', 'localhost')}_{db_info.get('port', 6379)}_{database}_{timestamp}.rdb"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    auto_creds = self.auto_credentials.get('redis', {})
                    password = auto_creds.get('password', '')
                    
                    # –î–ª—è Redis –∏—Å–ø–æ–ª—å–∑—É–µ–º BGSAVE –∏ –∫–æ–ø–∏—Ä—É–µ–º RDB —Ñ–∞–π–ª
                    cmd = [
                        'redis-cli',
                        '-h', db_info.get('host', 'localhost'),
                        '-p', str(db_info.get('port', 6379))
                    ]
                    
                    if password:
                        cmd.extend(['-a', password])
                        
                    cmd.append('BGSAVE')
                    
                    env = os.environ.copy()
                    result = subprocess.run(cmd, capture_output=True, text=True, env=env)
                    
                    if result.returncode == 0:
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è BGSAVE
                        import time
                        time.sleep(5)
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º RDB —Ñ–∞–π–ª
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ RDB —Ñ–∞–π–ª Redis
                            rdb_locations = [
                                '/var/lib/redis/dump.rdb',
                                '/var/redis/dump.rdb', 
                                '/usr/local/var/db/redis/dump.rdb',
                                '/data/dump.rdb'
                            ]
                            
                            for rdb_path in rdb_locations:
                                if os.path.exists(rdb_path):
                                    import shutil
                                    shutil.copy2(rdb_path, backup_path)
                                    break
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è RDB —Ñ–∞–π–ª–∞: {e}")
                            continue
                
                elif db_info['type'] == 'sqlite':
                    backup_file = f"sqlite_{os.path.basename(db_info['file_path'])}_{timestamp}.db"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                    
                    # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ SQLite
                    import shutil
                    shutil.copy2(db_info['file_path'], backup_path)
                    backups.append(backup_path)
                    continue
                
                elif db_info['type'] == 'elasticsearch':
                    # Elasticsearch snapshot —á–µ—Ä–µ–∑ API
                    backup_file = f"elasticsearch_{db_info.get('host', 'localhost')}_{db_info.get('port', 9200)}_{database}_{timestamp}.json"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                    
                    try:
                        import requests
                        # –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω–¥–µ–∫—Å–∞
                        url = f"http://{db_info.get('host', 'localhost')}:{db_info.get('port', 9200)}/{database}/_search"
                        params = {'size': 10000, 'scroll': '1m'}
                        response = requests.get(url, params=params, timeout=30)
                        
                        if response.status_code == 200:
                            with open(backup_path, 'w') as f:
                                json.dump(response.json(), f, indent=2)
                            backups.append(backup_path)
                            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Elasticsearch: {backup_path}")
                        continue
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Elasticsearch {database}: {e}")
                        continue
                
                elif db_info['type'] == 'couchdb':
                    # CouchDB replication/export
                    backup_file = f"couchdb_{db_info.get('host', 'localhost')}_{db_info.get('port', 5984)}_{database}_{timestamp}.json"
                    backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                    
                    try:
                        import requests
                        # –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        url = f"http://{db_info.get('host', 'localhost')}:{db_info.get('port', 5984)}/{database}/_all_docs"
                        params = {'include_docs': True}
                        response = requests.get(url, params=params, timeout=30)
                        
                        if response.status_code == 200:
                            with open(backup_path, 'w') as f:
                                json.dump(response.json(), f, indent=2)
                            backups.append(backup_path)
                            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è CouchDB: {backup_path}")
                        continue
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è CouchDB {database}: {e}")
                        continue
                
                else:
                    logging.warning(f"–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {db_info['type']} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è PostgreSQL, MySQL, MongoDB, Redis
                if db_info['type'] in ['postgresql', 'mongodb', 'redis'] and db_info['type'] != 'mysql':
                    result = subprocess.run(cmd, capture_output=True, text=True, env=env)
                
                if result.returncode == 0:
                    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                    backups.append(backup_path)
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {database}: {result.stderr}")
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {database}: {e}")
        
        return backups

    def _backup_docker_database(self, db_info, timestamp):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î –≤ Docker"""
        backups = []
        
        try:
            container = self.docker_client.containers.get(db_info['container_id'])
            credentials = db_info.get('credentials', {})
            
            for database in db_info.get('databases', []):
                try:
                    if db_info['type'] == 'postgresql':
                        backup_file = f"docker_pg_{db_info['container_name']}_{database}_{timestamp}.sql"
                        backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                        
                        cmd = [
                            'pg_dump',
                            '-U', credentials.get('user', 'postgres'),
                            '--format=custom',
                            database
                        ]
                        
                        env = {}
                        if credentials.get('password'):
                            env['PGPASSWORD'] = credentials['password']
                        
                    elif db_info['type'] == 'mysql':
                        backup_file = f"docker_mysql_{db_info['container_name']}_{database}_{timestamp}.sql"
                        backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                        
                        cmd = [
                            'mysqldump',
                            '-u', credentials.get('user', 'root'),
                            '--single-transaction',
                            '--routines',
                            '--triggers',
                            database
                        ]
                        
                        env = {}
                        if credentials.get('password'):
                            cmd.append(f"-p{credentials['password']}")
                    
                    elif db_info['type'] == 'mongodb':
                        backup_file = f"docker_mongo_{db_info['container_name']}_{database}_{timestamp}.archive"
                        backup_path = os.path.join(self.BACKUP_DIR, backup_file)
                        
                        cmd = [
                            'mongodump',
                            '--db', database,
                            '--archive'
                        ]
                        env = {}
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                    result = container.exec_run(cmd, environment=env)
                    
                    if result.exit_code == 0:
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
                        with open(backup_path, 'wb') as f:
                            f.write(result.output)
                        
                        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Docker: {backup_path}")
                        backups.append(backup_path)
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ Docker {database}: {result.output.decode()}")
                        
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Docker {database}: {e}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º {db_info['container_name']}: {e}")
        
        return backups

    def upload_to_drive(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive"""
        if not self.drive_service:
            logging.warning("Google Drive API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            filename = os.path.basename(file_path)
            
            file_metadata = {
                'name': filename,
                'parents': [self.DRIVE_FOLDER_ID] if self.DRIVE_FOLDER_ID else []
            }
            
            media = MediaFileUpload(file_path, resumable=True)
            
            file = self.drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            
            logging.info(f"–§–∞–π–ª {filename} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Google Drive. ID: {file.get('id')}")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive: {e}")
            return False

    def cleanup_old_backups(self, keep_days=7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            current_time = time.time()
            cutoff_time = current_time - (keep_days * 24 * 60 * 60)
            
            for filename in os.listdir(self.BACKUP_DIR):
                file_path = os.path.join(self.BACKUP_DIR, filename)
                if os.path.isfile(file_path):
                    file_time = os.path.getctime(file_path)
                    if file_time < cutoff_time:
                        os.remove(file_path)
                        logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")
                        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def run_full_backup(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.info("=" * 80)
        logging.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
        logging.info("=" * 80)
        
        start_time = datetime.now()
        
        # –≠—Ç–∞–ø 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ë–î
        databases = self.discover_all_databases()
        
        if not databases:
            logging.warning("‚ùå –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return
        
        logging.info(f"\nüíæ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {len(databases)} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –°–£–ë–î...")
        
        total_backups = 0
        successful_backups = 0
        successful_uploads = 0
        failed_backups = []
        
        # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –ë–î
        for i, db_info in enumerate(databases, 1):
            db_name = f"{db_info['type']} ({db_info.get('host', 'localhost')}:{db_info.get('port', 'unknown')})"
            logging.info(f"\nüì¶ [{i}/{len(databases)}] –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {db_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            db_count = len(db_info.get('databases', []))
            if db_count == 0:
                logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {db_name}")
                continue
            
            logging.info(f"üóÑÔ∏è –ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {db_count}")
            for db_name_item in db_info.get('databases', []):
                logging.info(f"   - {db_name_item}")
            
            try:
                backup_files = self.backup_database(db_info)
                
                if backup_files:
                    total_backups += len(backup_files)
                    successful_backups += len(backup_files)
                    
                    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(backup_files)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive
                    if self.drive_service:
                        for backup_file in backup_files:
                            try:
                                if self.upload_to_drive(backup_file):
                                    successful_uploads += 1
                                    logging.info(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Google Drive: {os.path.basename(backup_file)}")
                                    
                                    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                                    try:
                                        if os.path.isfile(backup_file):
                                            os.remove(backup_file)
                                        elif os.path.isdir(backup_file):
                                            import shutil
                                            shutil.rmtree(backup_file)
                                        logging.debug(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {backup_file}")
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                                else:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive: {os.path.basename(backup_file)}")
                            except Exception as e:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {backup_file}: {e}")
                    else:
                        logging.warning("‚ö†Ô∏è Google Drive API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
                else:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è {db_name}")
                    failed_backups.append(db_name)
                    
            except Exception as e:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {db_name}: {e}")
                failed_backups.append(db_name)
        
        # –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        logging.info("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        self.cleanup_old_backups()
        
        # –≠—Ç–∞–ø 4: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = end_time - start_time
        
        logging.info("=" * 80)
        logging.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
        logging.info("=" * 80)
        logging.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logging.info(f"üîç –°–£–ë–î –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(databases)}")
        logging.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å–æ–∑–¥–∞–Ω–æ: {successful_backups}/{total_backups}")
        logging.info(f"‚òÅÔ∏è –§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Drive: {successful_uploads}")
        
        if failed_backups:
            logging.warning(f"‚ùå –û—à–∏–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ({len(failed_backups)}):")
            for failed in failed_backups:
                logging.warning(f"   - {failed}")
        else:
            logging.info("‚úÖ –í—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._save_backup_statistics({
            'timestamp': end_time.isoformat(),
            'duration_seconds': duration.total_seconds(),
            'databases_discovered': len(databases),
            'backups_created': successful_backups,
            'backups_uploaded': successful_uploads,
            'failed_backups': failed_backups,
            'success_rate': (successful_backups / total_backups * 100) if total_backups > 0 else 0
        })
        
        logging.info("=" * 80)

    def _save_backup_statistics(self, stats):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            stats_file = os.path.join(self.BACKUP_DIR, 'backup_statistics.json')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if os.path.exists(stats_file):
                with open(stats_file, 'r', encoding='utf-8') as f:
                    all_stats = json.load(f)
            else:
                all_stats = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            all_stats.append(stats)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            all_stats = all_stats[-100:]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(all_stats, f, indent=2, ensure_ascii=False)
                
            logging.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {stats_file}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def generate_discovery_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ë–î"""
        if not self.discovered_databases:
            logging.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        logging.info("\n" + "=" * 80)
        logging.info("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ò –ë–î")
        logging.info("=" * 80)
        
        for i, db in enumerate(self.discovered_databases, 1):
            logging.info(f"\nüîπ [{i}] {db['type'].upper()}")
            logging.info(f"   üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {db.get('host', 'localhost')}:{db.get('port', 'N/A')}")
            logging.info(f"   üîç –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {', '.join(db.get('sources', [db.get('source', 'unknown')]))}")
            
            if db.get('connection_tested'):
                status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ" 
            elif db.get('connection_tested') is False:
                status = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            else:
                status = "‚ùì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å"
            logging.info(f"   üîó {status}")
            
            if db.get('auth_method'):
                logging.info(f"   üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {db['auth_method']}")
            
            databases = db.get('databases', [])
            if databases:
                logging.info(f"   üíæ –ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö ({len(databases)}):")
                for db_name in databases:
                    logging.info(f"      - {db_name}")
            else:
                logging.info(f"   üíæ –ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            if db.get('note'):
                logging.info(f"   üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {db['note']}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Docker
            if db.get('source') == 'docker':
                logging.info(f"   üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {db.get('container_name', 'N/A')}")
                logging.info(f"   üì¶ –û–±—Ä–∞–∑: {db.get('image', 'N/A')}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è SQLite
            if db.get('type') == 'sqlite':
                file_path = db.get('file_path', 'N/A')
                file_size = db.get('size', 0)
                logging.info(f"   üìÅ –§–∞–π–ª: {file_path}")
                logging.info(f"   üìè –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.2f} MB")
        
        logging.info("=" * 80)

    def test_database_connections(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–æ –≤—Å–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –ë–î"""
        if not self.discovered_databases:
            logging.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        logging.info("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –ë–î")
        logging.info("=" * 50)
        
        success_count = 0
        total_count = len(self.discovered_databases)
        
        for db in self.discovered_databases:
            db_name = f"{db['type']} ({db.get('host', 'localhost')}:{db.get('port', 'N/A')})"
            
            try:
                if db['type'] == 'postgresql':
                    success = self._test_postgresql_connection(db)
                elif db['type'] == 'mysql':
                    success = self._test_mysql_connection(db)
                elif db['type'] == 'mongodb':
                    success = self._test_mongodb_connection(db)
                elif db['type'] == 'redis':
                    success = self._test_redis_connection(db)
                elif db['type'] == 'sqlite':
                    success = os.path.exists(db.get('file_path', ''))
                else:
                    success = False
                    
                if success:
                    logging.info(f"‚úÖ {db_name}")
                    success_count += 1
                else:
                    logging.error(f"‚ùå {db_name}")
                    
            except Exception as e:
                logging.error(f"‚ùå {db_name}: {e}")
        
        logging.info("=" * 50)
        logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

    def _test_postgresql_connection(self, db):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            auto_creds = self.auto_credentials.get('postgresql', {})
            user = auto_creds.get('user', 'postgres')
            password = auto_creds.get('password', '')
            
            env = os.environ.copy()
            env['PGPASSWORD'] = password
            
            cmd = ['psql', '-h', db.get('host', 'localhost'), '-p', str(db.get('port', 5432)),
                   '-U', user, '-d', 'template1', '-c', 'SELECT version();', '--no-password']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5, env=env)
            return result.returncode == 0
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL: {e}")
            return False

    def _test_mysql_connection(self, db):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL"""
        try:
            auto_creds = self.auto_credentials.get('mysql', {})
            user = auto_creds.get('user', 'root')
            password = auto_creds.get('password', '')
            
            cmd = ['mysql', '-h', db.get('host', 'localhost'), '-P', str(db.get('port', 3306)),
                   '-u', user, '-e', 'SELECT VERSION();']
            if password:
                cmd.insert(-2, f'-p{password}')
                       
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MySQL: {e}")
            return False

    def _test_mongodb_connection(self, db):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB"""
        try:
            auto_creds = self.auto_credentials.get('mongodb', {})
            user = auto_creds.get('user', 'admin')
            password = auto_creds.get('password', '')
            
            cmd = ['mongo', '--host', f"{db.get('host', 'localhost')}:{db.get('port', 27017)}"]
            if password:
                cmd.extend(['--username', user, '--password', password])
            cmd.extend(['--eval', 'db.version()', '--quiet'])
                       
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB: {e}")
            return False

    def _test_redis_connection(self, db):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            auto_creds = self.auto_credentials.get('redis', {})
            password = auto_creds.get('password', '')
            
            cmd = ['redis-cli', '-h', db.get('host', 'localhost'), '-p', str(db.get('port', 6379))]
            if password:
                cmd.extend(['-a', password])
            cmd.append('ping')
                
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            return result.returncode == 0 and 'PONG' in result.stdout
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
            return False

    def _print_discovered_credentials(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.auto_credentials:
            logging.info("‚ÑπÔ∏è –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logging.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for db_type, creds in self.auto_credentials.items():
            cred_info = []
            if creds.get('user'):
                cred_info.append(f"user: {creds['user']}")
            if creds.get('password'):
                # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
                cred_info.append(f"password: {'*' * min(8, len(creds['password']))}")
            if creds.get('host'):
                cred_info.append(f"host: {creds['host']}")
            if creds.get('port'):
                cred_info.append(f"port: {creds['port']}")
            
            if cred_info:
                logging.info(f"  üîë {db_type.upper()}: {', '.join(cred_info)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print_logo()
    
    parser = argparse.ArgumentParser(description='DumpItAll - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î')
    parser.add_argument('--scan-only', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ë–î –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--test-connections', action='store_true',
                       help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –ë–î')
    parser.add_argument('--backup-once', action='store_true',
                       help='–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
    parser.add_argument('--daemon', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º')
    parser.add_argument('--interval', type=int, default=30,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    parser.add_argument('--config', type=str, default='.env',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env)')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.getLogger().setLevel(getattr(logging, args.log_level))
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if os.path.exists(args.config):
        from dotenv import load_dotenv
        load_dotenv(args.config)
    
    backup_manager = UniversalBackup()
    
    if args.scan_only:
        # –¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info("üîç –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î")
        backup_manager.discover_all_databases()
        backup_manager.generate_discovery_report()
        
    elif args.test_connections:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        logging.info("üß™ –†–µ–∂–∏–º: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        backup_manager.discover_all_databases()
        backup_manager.test_database_connections()
        
    elif args.backup_once:
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info("üíæ –†–µ–∂–∏–º: –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        backup_manager.run_full_backup()
        
    else:
        # –†–µ–∂–∏–º –¥–µ–º–æ–Ω–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        logging.info("ü§ñ –†–µ–∂–∏–º: –¥–µ–º–æ–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        schedule.every(args.interval).minutes.do(backup_manager.run_full_backup)
        
        logging.info(f"üóÑÔ∏è DumpItAll —Å–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        logging.info(f"–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {args.interval} –º–∏–Ω—É—Ç")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –±—ç–∫–∞–ø–∞
        backup_manager.run_full_backup()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except KeyboardInterrupt:
            logging.info("–î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logging.info("–°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logging.error(traceback.format_exc())