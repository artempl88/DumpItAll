#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è DumpItAll
–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –°–£–ë–î
"""

import os
import sys
import stat
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class AuthSetup:
    def __init__(self):
        self.home_dir = Path.home()
        self.env_file = '.env'
        self.credentials = {}
        
    def load_env_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.env_file):
            logging.error(f"–§–∞–π–ª {self.env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logging.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
            print("""
# PostgreSQL
PGPASSWORD=your_postgres_password

# MySQL
MYSQL_ROOT_PASSWORD=your_mysql_password

# MongoDB
MONGO_USER=admin
MONGO_PASSWORD=your_mongo_password

# Redis
REDIS_PASSWORD=your_redis_password
""")
            return False
            
        logging.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {self.env_file}")
        
        try:
            with open(self.env_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip().strip('"\'')
                        
                        if value:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                            os.environ[key] = value
                            self.credentials[key] = value
                            
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def setup_postgresql_auth(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL —á–µ—Ä–µ–∑ .pgpass"""
        logging.info("üêò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        pgpass_file = self.home_dir / '.pgpass'
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        password = (self.credentials.get('PGPASSWORD') or 
                   self.credentials.get('POSTGRES_PASSWORD') or 
                   os.environ.get('PGPASSWORD') or 
                   os.environ.get('POSTGRES_PASSWORD'))
        
        if not password:
            logging.warning("‚ö†Ô∏è PostgreSQL –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
            
        user = (self.credentials.get('POSTGRES_USER') or 
               self.credentials.get('PGUSER') or 
               os.environ.get('POSTGRES_USER') or 
               os.environ.get('PGUSER') or 
               'postgres')
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .pgpass
        pgpass_content = f"""# PostgreSQL password file
# hostname:port:database:username:password
localhost:5432:*:{user}:{password}
127.0.0.1:5432:*:{user}:{password}
*:5432:*:{user}:{password}
"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if pgpass_file.exists():
                backup_file = pgpass_file.with_suffix('.backup')
                pgpass_file.rename(backup_file)
                logging.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            with open(pgpass_file, 'w') as f:
                f.write(pgpass_content)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ 600
            os.chmod(pgpass_file, stat.S_IRUSR | stat.S_IWUSR)
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {pgpass_file} —Å –ø—Ä–∞–≤–∞–º–∏ 600")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_postgresql_connection(user)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .pgpass: {e}")
            return False
    
    def setup_mysql_auth(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ MySQL —á–µ—Ä–µ–∑ .my.cnf"""
        logging.info("üê¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MySQL –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        mycnf_file = self.home_dir / '.my.cnf'
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        password = (self.credentials.get('MYSQL_ROOT_PASSWORD') or 
                   self.credentials.get('MYSQL_PASSWORD') or 
                   os.environ.get('MYSQL_ROOT_PASSWORD') or 
                   os.environ.get('MYSQL_PASSWORD'))
        
        if not password:
            logging.warning("‚ö†Ô∏è MySQL –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
            
        user = (self.credentials.get('MYSQL_USER') or 
               self.credentials.get('MYSQL_ROOT_USER') or 
               os.environ.get('MYSQL_USER') or 
               os.environ.get('MYSQL_ROOT_USER') or 
               'root')
        
        host = (self.credentials.get('MYSQL_HOST') or 
               os.environ.get('MYSQL_HOST') or 
               'localhost')
        
        port = (self.credentials.get('MYSQL_PORT') or 
               os.environ.get('MYSQL_PORT') or 
               '3306')
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .my.cnf
        mycnf_content = f"""# MySQL client configuration
[client]
user={user}
password={password}
host={host}
port={port}

[mysql]
user={user}
password={password}

[mysqldump]
user={user}
password={password}

[mysqlcheck]
user={user}
password={password}

[mysqlshow]
user={user}
password={password}
"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if mycnf_file.exists():
                backup_file = mycnf_file.with_suffix('.backup')
                mycnf_file.rename(backup_file)
                logging.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            with open(mycnf_file, 'w') as f:
                f.write(mycnf_content)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ 600
            os.chmod(mycnf_file, stat.S_IRUSR | stat.S_IWUSR)
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {mycnf_file} —Å –ø—Ä–∞–≤–∞–º–∏ 600")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_mysql_connection()
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .my.cnf: {e}")
            return False
    
    def setup_mongodb_auth(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ MongoDB —á–µ—Ä–µ–∑ .mongorc.js"""
        logging.info("üçÉ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MongoDB –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        mongorc_file = self.home_dir / '.mongorc.js'
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = (self.credentials.get('MONGO_USER') or 
               self.credentials.get('MONGODB_USER') or 
               os.environ.get('MONGO_USER') or 
               os.environ.get('MONGODB_USER') or 
               'admin')
        
        password = (self.credentials.get('MONGO_PASSWORD') or 
                   self.credentials.get('MONGODB_PASSWORD') or 
                   os.environ.get('MONGO_PASSWORD') or 
                   os.environ.get('MONGODB_PASSWORD'))
        
        if not password:
            logging.warning("‚ö†Ô∏è MongoDB –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
            
        host = (self.credentials.get('MONGO_HOST') or 
               self.credentials.get('MONGODB_HOST') or 
               os.environ.get('MONGO_HOST') or 
               os.environ.get('MONGODB_HOST') or 
               'localhost')
        
        port = (self.credentials.get('MONGO_PORT') or 
               self.credentials.get('MONGODB_PORT') or 
               os.environ.get('MONGO_PORT') or 
               os.environ.get('MONGODB_PORT') or 
               '27017')
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .mongorc.js
        mongorc_content = f"""// MongoDB authentication configuration
var mongoUser = '{user}';
var mongoPassword = '{password}';
var mongoHost = '{host}';
var mongoPort = {port};

function autoAuth() {{
    try {{
        db = db.getSiblingDB('admin');
        db.auth(mongoUser, mongoPassword);
        print('‚úÖ MongoDB –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    }} catch (e) {{
        print('‚ö†Ô∏è MongoDB –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + e);
    }}
}}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
if (typeof db !== 'undefined') {{
    autoAuth();
}}
"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if mongorc_file.exists():
                backup_file = mongorc_file.with_suffix('.backup')
                mongorc_file.rename(backup_file)
                logging.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            with open(mongorc_file, 'w') as f:
                f.write(mongorc_content)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ 600
            os.chmod(mongorc_file, stat.S_IRUSR | stat.S_IWUSR)
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {mongorc_file} —Å –ø—Ä–∞–≤–∞–º–∏ 600")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_mongodb_connection(user, password, host, port)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .mongorc.js: {e}")
            return False
    
    def setup_redis_auth(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Redis —á–µ—Ä–µ–∑ .rediscli_auth"""
        logging.info("üî¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        rediscli_file = self.home_dir / '.rediscli_auth'
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        password = (self.credentials.get('REDIS_PASSWORD') or 
                   os.environ.get('REDIS_PASSWORD'))
        
        if not password:
            logging.warning("‚ö†Ô∏è Redis –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if rediscli_file.exists():
                backup_file = rediscli_file.with_suffix('.backup')
                rediscli_file.rename(backup_file)
                logging.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ —Ñ–∞–π–ª
            with open(rediscli_file, 'w') as f:
                f.write(password)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ 600
            os.chmod(rediscli_file, stat.S_IRUSR | stat.S_IWUSR)
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {rediscli_file} —Å –ø—Ä–∞–≤–∞–º–∏ 600")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è redis-cli
            os.environ['REDISCLI_AUTH'] = password
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_redis_connection(password)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .rediscli_auth: {e}")
            return False
    
    def setup_shell_aliases(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        logging.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ shell –∞–ª–∏–∞—Å–æ–≤...")
        
        bashrc_file = self.home_dir / '.bashrc'
        
        aliases = """
# DumpItAll Database Aliases
alias pgdump='pg_dump -h localhost -U postgres'
alias pglist='psql -h localhost -U postgres -l'
alias mysqllist='mysql -e "SHOW DATABASES;"'
alias mongolist='mongo --eval "db.adminCommand(\"listDatabases\").databases.forEach(function(db) { print(db.name) })" --quiet'
alias redisinfo='redis-cli INFO keyspace'

# Quick backup commands
alias backup-pg='pg_dump -h localhost -U postgres -d $1 > backup_$(date +%Y%m%d_%H%M%S).sql'
alias backup-mysql='mysqldump --single-transaction --routines --triggers $1 > backup_$(date +%Y%m%d_%H%M%S).sql'
"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à–∏ –∞–ª–∏–∞—Å—ã
            if bashrc_file.exists():
                with open(bashrc_file, 'r') as f:
                    content = f.read()
                    if 'DumpItAll Database Aliases' in content:
                        logging.info("‚ÑπÔ∏è –ê–ª–∏–∞—Å—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                        return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å—ã
            with open(bashrc_file, 'a') as f:
                f.write(aliases)
            
            logging.info(f"‚úÖ –ê–ª–∏–∞—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {bashrc_file}")
            logging.info("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'source ~/.bashrc' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ª–∏–∞—Å–æ–≤")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–∏–∞—Å–æ–≤: {e}")
            return False
    
    def _test_postgresql_connection(self, user='postgres'):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            cmd = ['psql', '-h', 'localhost', '-U', user, '-d', 'template1', '-c', '\\l', '-t']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                logging.info("‚úÖ PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è)")
                return True
            else:
                logging.warning("‚ö†Ô∏è PostgreSQL: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL: {e}")
            return False
    
    def _test_mysql_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL"""
        try:
            cmd = ['mysql', '-e', 'SELECT VERSION();']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                logging.info("‚úÖ MySQL: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è)")
                return True
            else:
                logging.warning("‚ö†Ô∏è MySQL: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MySQL: {e}")
            return False
    
    def _test_mongodb_connection(self, user, password, host, port):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB"""
        try:
            cmd = ['mongo', '--host', f"{host}:{port}", '--username', user, 
                   '--password', password, '--eval', 'db.version()', '--quiet']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                logging.info("‚úÖ MongoDB: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logging.warning("‚ö†Ô∏è MongoDB: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB: {e}")
            return False
    
    def _test_redis_connection(self, password):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            cmd = ['redis-cli', '-a', password, 'ping']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0 and 'PONG' in result.stdout:
                logging.info("‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logging.warning("‚ö†Ô∏è Redis: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
            return False
    
    def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–î"""
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–î...")
        
        clients = {
            'psql': 'PostgreSQL –∫–ª–∏–µ–Ω—Ç',
            'mysql': 'MySQL –∫–ª–∏–µ–Ω—Ç',
            'mongo': 'MongoDB –∫–ª–∏–µ–Ω—Ç',
            'redis-cli': 'Redis –∫–ª–∏–µ–Ω—Ç'
        }
        
        missing = []
        for cmd, name in clients.items():
            if subprocess.run(['which', cmd], capture_output=True).returncode != 0:
                missing.append(name)
                logging.warning(f"‚ö†Ô∏è {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logging.info(f"‚úÖ {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if missing:
            logging.warning("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:")
            logging.warning("sudo apt-get update")
            logging.warning("sudo apt-get install -y postgresql-client mysql-client mongodb-clients redis-tools")
            
        return len(missing) == 0
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –ù–ê–°–¢–†–û–ô–ö–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
        print("=" * 60)
        
        files = [
            ('~/.pgpass', 'PostgreSQL'),
            ('~/.my.cnf', 'MySQL'),
            ('~/.mongorc.js', 'MongoDB'),
            ('~/.rediscli_auth', 'Redis')
        ]
        
        for file_path, db_name in files:
            full_path = Path.home() / file_path[2:]  # –£–±–∏—Ä–∞–µ–º ~/
            if full_path.exists():
                print(f"‚úÖ {db_name}: {file_path}")
            else:
                print(f"‚ùå {db_name}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        print("\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  psql -l                    # –°–ø–∏—Å–æ–∫ –ë–î PostgreSQL")
        print("  mysql -e 'SHOW DATABASES;' # –°–ø–∏—Å–æ–∫ –ë–î MySQL")
        print("  mongo --eval 'db.version()' # –í–µ—Ä—Å–∏—è MongoDB")
        print("  redis-cli ping             # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis")
        
        print("\nüîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
        print("  - –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∞–º–∏ 600 (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)")
        print("  - –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup")
        print("  - –ü–∞—Ä–æ–ª–∏ –≤–∑—è—Ç—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
        
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print("  python3 backup_script.py --backup-once")
        print("=" * 60)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üîê DumpItAll - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–î
        if not self.check_prerequisites():
            logging.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ë–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/n): ")
            if response.lower() != 'y':
                return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.load_env_file():
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–∂–¥–æ–π –°–£–ë–î
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...\n")
        
        self.setup_postgresql_auth()
        self.setup_mysql_auth()
        self.setup_mongodb_auth()
        self.setup_redis_auth()
        self.setup_shell_aliases()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.print_summary()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è DumpItAll'
    )
    parser.add_argument(
        '--config', 
        type=str, 
        default='.env',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env)'
    )
    parser.add_argument(
        '--test-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
    )
    
    args = parser.parse_args()
    
    setup = AuthSetup()
    setup.env_file = args.config
    
    if args.test_only:
        logging.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        setup.load_env_file()
        setup._test_postgresql_connection()
        setup._test_mysql_connection()
        # –î–ª—è MongoDB –∏ Redis –Ω—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    else:
        setup.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logging.error(traceback.format_exc())